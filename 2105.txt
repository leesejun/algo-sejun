
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
using namespace std;

#define RIGHT_UP   1
#define LEFT_UP    2
#define LEFT_DOWN  3
#define RIGHT_DOWN 4
#define UNVISIT 0
#define VISIT   1

int store_arr[21][21];
int visit_arr[21][21];

int dx[4] = { 1, -1, -1, 1 };
int dy[4] = { -1, -1, 1, 1 };

vector<pair<int, int>> start_point;
vector<int> save_num;
int N, TCs, answer;

void init();
bool isVisited(int x, int y, int dir);
void search_dfs(int x, int y, int cnt, int end_x, int end_y);
bool check_coordi_info(int x, int y);

int main()
{		
	//for (int TC_idx = 1; TC_idx <= TCs; TC_idx++) {
		init();

		for (int y = 0; y < N - 2; y++) {
			for (int x = 1; x < N - 1; x++) {
				search_dfs(x, y, 0, x, y);
				//printf("(%d,%d) ", y, x);
			}
			printf("\n");
		}
		printf("#%d %d\n", 1, answer);
	//}

	return 0;
}

void init() {
	save_num.clear();
	answer = -1;
	
	scanf("%d", &N);
	for (int input_y = 0; input_y < N; input_y++) {
		for (int input_x = 0; input_x < N; input_x++) {
			scanf("%d", &store_arr[input_y][input_x]);
		}
	}
}

void search_dfs(int x, int y, int cnt, int end_x, int end_y) {
	if (cnt > 0 && end_x == x && end_y == y) {
		if (answer < cnt)
			answer = cnt;

		return;
	}
	
	
	
	for (int _y = 0; _y < N; _y++){
		for (int _x = 0; _x < N; _x++) {
			printf("%d ", visit_arr[_y][_x]);
		}
		printf("\n");
	}
	printf("========vector=============\n");
	for (int v_idx = 0; v_idx < save_num.size(); v_idx)
		printf("%d , ", save_num[v_idx]);

		printf("\n");
	system("pause");
	for (int dir_idx = 1; dir_idx <= 4; dir_idx++) {
		if (isVisited(x, y, dir_idx)) {
			visit_arr[y + dy[dir_idx]][x + dx[dir_idx]] = VISIT;
			save_num.push_back(store_arr[y + dy[dir_idx]][x + dx[dir_idx]]);

			search_dfs(x + dx[dir_idx], 
				y + dy[dir_idx], 
				cnt + 1,
				end_x,
				end_y);


			save_num.pop_back();
			visit_arr[y + dy[dir_idx]][x + dx[dir_idx]] = UNVISIT;
		}
	}
	
}

bool isVisited(int x, int y, int dir) {
	bool flag = false;
	int check_num;
	if (dir == RIGHT_UP) {
		if (visit_arr[y - 1][x + 1] == VISIT || check_coordi_info(x + 1, y - 1)) {
			return false;
		}
		else {
			flag = true;
			check_num = visit_arr[y - 1][x + 1];
		}
	}
	else if (dir == LEFT_UP) {
		if (visit_arr[y - 1][x - 1] == VISIT || check_coordi_info(x - 1, y - 1)) {
			return false;
		}
		else {
			flag = true;
			check_num = visit_arr[y - 1][x - 1];
		}
	}
	else if (dir == LEFT_DOWN) {
		if (visit_arr[y + 1][x - 1] == VISIT || check_coordi_info(x - 1, y + 1)) {
			return false;
		}
		else {
			flag = true;
			check_num = visit_arr[y + 1][x - 1];
		}
	}
	else if (dir == RIGHT_DOWN) {
		if (visit_arr[y + 1][x + 1] == VISIT || check_coordi_info(x + 1, y + 1)) {
			return false;
		}
		else {
			flag = true;
			check_num = visit_arr[y + 1][x + 1];
		}
	}

	if (flag == true) {
		for (int check_num_idx = 0; check_num_idx < save_num.size(); check_num_idx++) {
			if (save_num[check_num_idx] == check_num)
				return false;
		}
	}

	return true;
}

bool check_coordi_info(int x, int y) {
	if (x < 0 || y < 0 || x >= N || y >= N) {
		return true;
	}
	return false;
}


/*
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
using namespace std;

void search_dfs(int idx);
vector<int> in;

int main() {

	search_dfs(0);
	return 0;
}

void search_dfs(int idx) {

	printf("Start_idx = %d\n", idx);
	in.push_back(idx);

	for (int j = 0; j < in.size(); j++) {
		printf(" %d ,", in[j]);
	}
	printf("\n===========================\n");
	system("pause");

	for (int i = 1; i < 4; i++) {
		printf("<START> 1. %d , %d\n", i, i);
		search_dfs(i);
		printf("<END> 2. %d , %d\n", i, i);
	}

}

*/