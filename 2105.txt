/*
#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <stdio.h>
#include <algorithm>
#include <vector>
using namespace std;

#define RIGHT_UP   1
#define LEFT_UP    2
#define LEFT_DOWN  3
#define RIGHT_DOWN 4
#define UNVISIT 0
#define VISIT   1

int store_arr[21][21];
int visit_arr[21][21];

int dx[4] = { 1, -1, -1, 1 };
int dy[4] = { -1, -1, 1, 1 };

vector<pair<int, int>> start_point;
vector<int> save_num;
int N, TCs, answer;

void init();
bool isVisited(int x, int y, int dir);
void search_dfs(int x, int y, int cnt, int end_x, int end_y);
bool check_coordi_info(int x, int y);

int main()
{		
	//for (int TC_idx = 1; TC_idx <= TCs; TC_idx++) {
		init();

		for (int y = 0; y < N - 2; y++) {
			for (int x = 1; x < N - 1; x++) {
				search_dfs(x, y, 0, x, y);
				//printf("(%d,%d) ", y, x);
			}
			printf("\n");
		}
		printf("#%d %d\n", 1, answer);
	//}

	return 0;
}

void init() {
	save_num.clear();
	answer = -1;
	
	scanf("%d", &N);
	for (int input_y = 0; input_y < N; input_y++) {
		for (int input_x = 0; input_x < N; input_x++) {
			scanf("%d", &store_arr[input_y][input_x]);
		}
	}
}

void search_dfs(int x, int y, int cnt, int end_x, int end_y) {
	if (cnt > 0 && end_x == x && end_y == y) {
		if (answer < cnt)
			answer = cnt;

		return;
	}
	
	
	system("pause");
	for (int dir_idx = 1; dir_idx <= 4; dir_idx++) {
		if (isVisited(x, y, dir_idx)) {
			visit_arr[y + dy[dir_idx]][x + dx[dir_idx]] = VISIT;
			save_num.push_back(store_arr[y + dy[dir_idx]][x + dx[dir_idx]]);

			search_dfs(x + dx[dir_idx], 
				y + dy[dir_idx], 
				cnt + 1,
				end_x,
				end_y);

			

			save_num.pop_back();
			

			visit_arr[y + dy[dir_idx]][x + dx[dir_idx]] = UNVISIT;
		}
	}
	
}

bool isVisited(int x, int y, int dir) {
	printf("X = %d , Y = %d , dir = %d\n", x, y, dir);
	bool flag = false;
	int check_num;
	if (dir == RIGHT_UP) {
		if (visit_arr[y - 1][x + 1] == VISIT || check_coordi_info(x + 1, y - 1)) {
			return false;
		}
		else {
			flag = true;
			check_num = visit_arr[y - 1][x + 1];
		}
	}
	else if (dir == LEFT_UP) {
		printf("1.\n");
		if (visit_arr[y - 1][x - 1] == VISIT || check_coordi_info(x - 1, y - 1)) {
			printf("2.\n");
			return false;
		}
		else {
			printf("3.\n");
			flag = true;
			check_num = visit_arr[y - 1][x - 1];
		}
	}
	else if (dir == LEFT_DOWN) {
		if (visit_arr[y + 1][x - 1] == VISIT || check_coordi_info(x - 1, y + 1)) {
			return false;
		}
		else {
			flag = true;
			check_num = visit_arr[y + 1][x - 1];
		}
	}
	else if (dir == RIGHT_DOWN) {
		if (visit_arr[y + 1][x + 1] == VISIT || check_coordi_info(x + 1, y + 1)) {
			return false;
		}
		else {
			flag = true;
			check_num = visit_arr[y + 1][x + 1];
		}
	}

	if (flag == true) {
		for (int check_num_idx = 0; check_num_idx < save_num.size(); check_num_idx++) {
			if (save_num[check_num_idx] == check_num) {
				printf("@@@@@\n");
				return false;
			}
		}
	}

	return true;
}

bool check_coordi_info(int x, int y) {
	if (x < 0 || y < 0 || x >= N || y >= N) {
		printf("0, %d %d\n", x, y);
		return true;
	}

	for (int _y = 0; _y < N; _y++){
		for (int _x = 0; _x < N; _x++) {
			printf("%d ", visit_arr[_y][_x]);
		}
		printf("\n");
	}
	return false;
}
*/

#define _CRT_SECURE_NO_WARNINGS
#include <cstdio>
#include <string>

#define RIGHT_DOWN    0 
#define LEFT_DOWN     1  
#define LEFT_UP       2    
#define RIGHT_UP      3   

using namespace std;

int N, answer, end_x, end_y;
int store_map[20][20];
bool checkOverlapNumber[101];

void checkCase(int x, int y, int VisitCnt, int dir) {
	if (dir == RIGHT_DOWN) {
		if (x + 1 < N && y + 1 < N - 1) {
			if (!checkOverlapNumber[store_map[y + 1][x + 1]]) {
				checkOverlapNumber[store_map[y + 1][x + 1]] = true;
				checkCase(x + 1, y + 1, VisitCnt + 1, RIGHT_DOWN);
				checkOverlapNumber[store_map[y + 1][x + 1]] = false;
			}
		}
		if (!checkOverlapNumber[store_map[y + 1][x - 1]]) {
			checkOverlapNumber[store_map[y + 1][x - 1]] = true;
			checkCase(x - 1, y + 1, VisitCnt + 1, LEFT_DOWN);
			checkOverlapNumber[store_map[y + 1][x - 1]] = false;
		}
		else if (dir == LEFT_DOWN) {
			if (x - 1 > 0 && y + 1 < N) {
				if (!checkOverlapNumber[store_map[y + 1][x - 1]]) {
					checkOverlapNumber[store_map[y + 1][x - 1]] = true;
					checkCase(x - 1, y + 1, VisitCnt + 1, LEFT_DOWN);
					checkOverlapNumber[store_map[y + 1][x - 1]] = false;
				}
			}
			if (!checkOverlapNumber[store_map[y - 1][x - 1]]) {
				checkOverlapNumber[store_map[y - 1][x - 1]] = true;
				checkCase(x - 1, y - 1, VisitCnt + 1, LEFT_UP);
				checkOverlapNumber[store_map[y - 1][x - 1]] = false;
			}
		}
		else if (dir == LEFT_UP) {
			if (x - 1 >= 0 && y - 1 > 0) {
				if (!checkOverlapNumber[store_map[y - 1][x - 1]]) {
					checkOverlapNumber[store_map[y - 1][x - 1]] = true;
					checkCase(x - 1, y - 1, VisitCnt + 1, LEFT_UP);
					checkOverlapNumber[store_map[y - 1][x - 1]] = false;
				}
			}
			if (!checkOverlapNumber[store_map[y - 1][x + 1]]) {
				checkOverlapNumber[store_map[y - 1][x + 1]] = true;
				checkCase(x + 1, y - 1, VisitCnt + 1, RIGHT_UP);
				checkOverlapNumber[store_map[y - 1][x + 1]] = false;
			}
			else {
				if (x + 1 == end_x && y - 1 == end_y) {
					if (answer < VisitCnt)
						answer = VisitCnt;
				}
			}
		}
		else if (dir == RIGHT_UP) {
			if (x + 1 == end_x && y - 1 == end_y) {
				if (answer < VisitCnt) {
					answer = VisitCnt;
				}
			}
			if (x + 1 < N && y - 1 >= 0) {
				if (!checkOverlapNumber[store_map[y - 1][x + 1]]) {
					checkOverlapNumber[store_map[y - 1][x + 1]] = true;
					checkCase(x + 1, y - 1, VisitCnt + 1, RIGHT_UP);
					checkOverlapNumber[store_map[y - 1][x + 1]] = false;
				}
			}
		}
	}
}

void calcAnswer(void) {
	for (int i = 0; i<N - 2; i++) {
		for (int j = 1; j<N - 1; j++) {
			if (store_map[i][j] != store_map[i + 1][j + 1]) {
				end_x = j;
				end_y = i;
				checkOverlapNumber[store_map[i][j]] = true;
				checkOverlapNumber[store_map[i + 1][j + 1]] = true;
				checkCase(j + 1, i + 1, 2, RIGHT_DOWN);
				checkOverlapNumber[store_map[i][j]] = false;
				checkOverlapNumber[store_map[i + 1][j + 1]] = false;
			}
		}
	}
}

int main(void) {
	int T;
	scanf("%d", &T);

	for (int t_case = 1; t_case <= T; t_case++) {
		scanf("%d", &N);

		for (int i = 0; i<N; i++) {
			for (int j = 0; j<N; j++)
				scanf("%d", &store_map[i][j]);
		}

		memset(checkOverlapNumber, false, sizeof(bool) * 101);
		answer = 0;
		calcAnswer();

		printf("#%d %d\n", t_case, answer == 0 ? -1 : answer);
	}


	return 0;
}